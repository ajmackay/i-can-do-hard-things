<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aaron Mackay</title>
<link>https://amackay.netlify.app/blog.html</link>
<atom:link href="https://amackay.netlify.app/blog.xml" rel="self" type="application/rss+xml"/>
<description>Data Science Blog by me... Aaron</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 25 Mar 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Text Pre-Processing</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/NLP/Text Pre-Processing/text_pre-processing.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DiagrammeR)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grViz</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  digraph {</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  layout = dot</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  node [shape = rectangle,style=filled,fixedsize=False]</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  edge[color=grey,arrowhead=vee]</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A[label = 'Corpus']</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B[label = 'Pre-Processing']</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  C[label = 'Tokenisation']</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  D[label = 'Stop Word Removal']</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  E[label = 'Stemming/Lemmatisation']</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A-&gt;B</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;C</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;D</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;E</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-84b8a25801cd9da40dd5" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-84b8a25801cd9da40dd5">{"x":{"diagram":"\n  digraph {\n  layout = dot\n  node [shape = rectangle,style=filled,fixedsize=False]\n  edge[color=grey,arrowhead=vee]\n  A[label = \"Corpus\"]\n  B[label = \"Pre-Processing\"]\n  C[label = \"Tokenisation\"]\n  D[label = \"Stop Word Removal\"]\n  E[label = \"Stemming/Lemmatisation\"]\n\n  A->B\n  B->C\n  B->D\n  B->E\n\n\n  }\n   ","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Text (like all real-world data) comes in a messy format. Whether that text be a collection of blog posts, newspaper articles, a book and so on, the text must be prepared and organised in a format that will make it more efficient to apply further techniques to it.</p>
<p>In pre-processing text, there are a few key steps including:</p>
<ol type="1">
<li><strong>Tokenisation:</strong> Splitting text into individual tokens<sup>1</sup></li>
</ol>
<section id="load-packages-and-data" class="level2">
<h2 class="anchored" data-anchor-id="load-packages-and-data">Load Packages and Data</h2>
<p>Much of our pre-processing can be completed with the <code>tidytext</code> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(scriptuRs)</span></code></pre></div>
</div>
</section>
<section id="text-pre-processing" class="level2">
<h2 class="anchored" data-anchor-id="text-pre-processing">Text Pre-Processing</h2>
<p>Clean and pre-process text data to remove noise, irrelevant information and standardise the format for further processing and analysis.</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Tokenisation</p></li>
<li><p>Stopword removal</p></li>
<li><p>Stemming</p></li>
<li><p>Lemmatisation</p></li>
</ul>
</section>
<section id="text-representation" class="level2">
<h2 class="anchored" data-anchor-id="text-representation">Text Representation</h2>
<p>[Text here]</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Bad-of-words model</p></li>
<li><p>Term Frequency - Inverse Document Frequency (TF-IDF)</p></li>
<li><p>Word embeddings (word2vec, GloVe)</p></li>
<li><p>Contextual embeddings (BERT, GPT)</p></li>
</ul>
</section>
<section id="topic-modeling" class="level2">
<h2 class="anchored" data-anchor-id="topic-modeling">Topic Modeling</h2>
<p>Identify themes or topics present in a collection of documents</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li>Latent Dirichlet Allocation (LDA)</li>
</ul>
<section id="topic-modeling-1" class="level3">
<h3 class="anchored" data-anchor-id="topic-modeling-1">Topic Modeling</h3>
<p><strong>Learning Outcomes:</strong> Identify and extract the underlying themes or topics present in a corpus.</p>


</section>
</section>


<div id="quarto-appendix" class="default"><section id="footnotes" class="footnotes footnotes-end-of-document"><h2 class="anchored quarto-appendix-heading">Footnotes</h2>

<ol>
<li id="fn1"><p>A token is the smallest attribute that you are interested in (e.g., characters, words, sentences)↩︎</p></li>
</ol>
</section></div> ]]></description>
  <category>NLP</category>
  <guid>https://amackay.netlify.app/posts/NLP/Text Pre-Processing/text_pre-processing.html</guid>
  <pubDate>Mon, 25 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>NLP Outline</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/NLP/Outline/outline.html</link>
  <description><![CDATA[ 




<p>Rather than try and “learn everything I can” about Natural Language Processing, I figured the better method would be to first outline my goals in learning NLP. From here, I can design a program that will enable me to achieve these goals as efficiently as possible.</p>
<p>In short then, my main goal for learning NLP is to be able to extract key themes from a collection of documents (known in NLP-speak as a “corpus”). I want to be able to input a corpus into a model, which will then identify and extract themes or topics, both across the corpus as a whole and within documents in the corpus. These themes should be quantified in terms of their importance.</p>
<p>A quick bit of research has indicated that <strong>Topic Modeling</strong> is the technique that I need to become familiar with.</p>
<p>Topic modeling is a statistical model that identifies the unique themes (or “topics”) that are present in a collection of documents. These topics are identified and their importance quantified by the number of similar words that pertain to that topic in a document. The end result is an extraction of the topics in a corpus as well as the balance of topic’s within each document.</p>
<p>To understand and utilise topic modeling, there are number of pre-requisite skills that I will need to understand first.</p>
<p>Throughout this series I will be working with the New Testament from the King James bible, from the package <code>scripturRs</code>.</p>
<section id="syllabus" class="level1">
<h1>Syllabus:</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DiagrammeR)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grViz</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  digraph {</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  layout = dot</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  node [shape = rectangle,style=filled,fixedsize=False]</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  edge[color=grey,arrowhead=vee]</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A[label = 'Corpus']</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B[label = 'Pre-Processing']</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  C[label = 'Tokenisation']</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  D[label = 'Stop Word Removal']</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  E[label = 'Stemming/Lemmatisation']</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F[label = 'Text Representation']</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  G[label = 'Bag-of-Words']</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  J[label = 'Contextual Embeddings']</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  H[label = 'TF-IDF']</span></span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  I[label = 'Word Embeddings']</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  K[label = 'Topic Modeling']</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  L[label = 'LDA']</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A-&gt;B</span></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;C</span></span>
<span id="cb1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;D</span></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;E</span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  rank=same {B-&gt;F}</span></span>
<span id="cb1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;G</span></span>
<span id="cb1-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;H</span></span>
<span id="cb1-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;I</span></span>
<span id="cb1-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  G-&gt;J</span></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  rank=same {F-&gt;K}</span></span>
<span id="cb1-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  K-&gt;L</span></span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb1-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-bb22cf8adfa22e48edb3" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-bb22cf8adfa22e48edb3">{"x":{"diagram":"\n  digraph {\n  layout = dot\n  node [shape = rectangle,style=filled,fixedsize=False]\n  edge[color=grey,arrowhead=vee]\n  A[label = \"Corpus\"]\n  B[label = \"Pre-Processing\"]\n  C[label = \"Tokenisation\"]\n  D[label = \"Stop Word Removal\"]\n  E[label = \"Stemming/Lemmatisation\"]\n\n  F[label = \"Text Representation\"]\n  G[label = \"Bag-of-Words\"]\n  J[label = \"Contextual Embeddings\"]\n  H[label = \"TF-IDF\"]\n  I[label = \"Word Embeddings\"]\n\n  K[label = \"Topic Modeling\"]\n  L[label = \"LDA\"]\n\n  A->B\n  B->C\n  B->D\n  B->E\n\n  rank=same {B->F}\n  F->G\n  F->H\n  F->I\n  G->J\n\n  rank=same {F->K}\n  K->L\n\n  }\n   ","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<section id="text-pre-processing" class="level2">
<h2 class="anchored" data-anchor-id="text-pre-processing">Text Pre-Processing</h2>
<p>Clean and pre-process text data to remove noise, irrelevant information and standardise the format for further processing and analysis.</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Tokenisation</p></li>
<li><p>Stopword removal</p></li>
<li><p>Stemming</p></li>
<li><p>Lemmatisation</p></li>
</ul>
</section>
<section id="text-representation" class="level2">
<h2 class="anchored" data-anchor-id="text-representation">Text Representation</h2>
<p>After pre-processing, the text must be converted into a format that will allow for more complex analysis. This usually involves attributing a quantitative value to the text (either specific words, words within documents or documents within a corpus).</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Bad-of-words model</p></li>
<li><p>Term Frequency - Inverse Document Frequency (TF-IDF)</p></li>
<li><p>Word embeddings (word2vec, GloVe)</p></li>
<li><p>Contextual embeddings (BERT, GPT)</p></li>
</ul>
</section>
<section id="topic-modeling" class="level2">
<h2 class="anchored" data-anchor-id="topic-modeling">Topic Modeling</h2>
<p>Once the text has been pre-processed and is now in a format that computers and statistical models will understand, we can apply these models to extract the topics that are contained within our text.</p>
<p>The most popular model for achieving this seems to be <strong>Latent Dirichlet Allocation (LDA)</strong>.</p>


</section>
</section>

 ]]></description>
  <category>NLP</category>
  <guid>https://amackay.netlify.app/posts/NLP/Outline/outline.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to the Series</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/workflow/intro to series/intro.html</link>
  <description><![CDATA[ 




<p>This series will focus on my thoughts and methods around structuring R studio projects with little side-quests on things like working with git and documentation.</p>
<p>In the five or so years that I have been using R, I have found there to be a surprising lack of resources on this topic (though two resources I have found helpful are <a href="https://rfortherestofus.com/2021/08/rstudio-project-structure/">this post by David Keyes</a> - notably his take on how to write a README file, and this <a href="https://hbiostat.org/rflow/">in depth guide on Reproducible Data Analysis and Reporting by Frank E Harrell Jr</a>) and so I thought I would share what I have learnt (and am still learning!) along my R journey.</p>
<p>This series will likely be a perpetual work-in-progress as I continue to learn and refine my approach and I am very much open to feedback on improving the workflow presented here.</p>
<p>In brief, some of the topics I expect to cover in the coming weeks include:</p>
<ol type="1">
<li>Setting up a project template</li>
<li>Housing the project template in a package to be called when you want to start a new project</li>
<li>A bit on <code>Renv</code> and reproducible environments</li>
<li>A bit on saving and loading objects with <code>qs</code></li>
</ol>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/workflow/intro to series/intro.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Structuring your R Project</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/workflow/project structure/project-structure.html</link>
  <description><![CDATA[ 







 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/workflow/project structure/project-structure.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>This is a post with executable code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/post-with-code/index.html</guid>
  <pubDate>Thu, 11 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Named Lists from Group Maps</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/Group Map Named List/index.html</link>
  <description><![CDATA[ 




<p>The <code>group_map()</code> function is one of my favourite iterative functions within the <code>purrr</code> package. Like the other iterative functions within the purrr-verse, it has been designed to be simple and intuitive.</p>
<p>In a nutshell, <code>group_map()</code> applies a function over each group of a grouped dataframe and returns a list containing the function result per group. This is great when we want to…well apply a function on a per group basis.</p>
<p>As a quick example, say we want to run a regression to pedict petal length with petal width for each class of species using data in the <code>iris</code> dataset. A <code>group_map()</code> will allow you to do this, and save the outcome in one object so that you can quickly access each regression outcome.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"></span>
<span id="cb1-4">iris_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6">lm_formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formula</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Petal.Length ~ Petal.Width"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_map</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dat, group) {</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(lm_formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat)</span>
<span id="cb1-12">  })</span></code></pre></div>
</div>
<p>And now we can quickly access our <code>lm</code> results by calling <code>lm_results</code>. Combining this with <code>broom</code>’s <code>tidy</code> in a <code>map()</code> means you can quickly see the key results of each regression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(lm_results, broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tidy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 2 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)    1.33     0.0600     22.1  7.68e-27
2 Petal.Width    0.546    0.224       2.44 1.86e- 2

[[2]]
# A tibble: 2 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)     1.78     0.284      6.28 9.48e- 8
2 Petal.Width     1.87     0.212      8.83 1.27e-11

[[3]]
# A tibble: 2 × 5
  term        estimate std.error statistic       p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
1 (Intercept)    4.24      0.561      7.56 0.00000000104
2 Petal.Width    0.647     0.275      2.36 0.0225       </code></pre>
</div>
</div>
<p>Here you may notice the key issue for which this week’s blog post is designed to address: How can you tell which result corresponds to which group?</p>
<p>The solution is reasonably simple: Create a list that contains the <code>lm</code> object and set the element names of the list to be the current group.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_map</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dat, group) {</span>
<span id="cb4-4">    model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(lm_formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat)</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Place the lm model into a list and set the name to be the current group</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(group<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Species)</span>
<span id="cb4-9">  })</span>
<span id="cb4-10"></span>
<span id="cb4-11">lm_results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[[1]]$setosa

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     1.3276       0.5465  



[[2]]
[[2]]$versicolor

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
      1.781        1.869  



[[3]]
[[3]]$virginica

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     4.2407       0.6473  </code></pre>
</div>
</div>
<p>And now you can see which <code>lm</code> model corresponds to which species group. However what this has done is added each named list element to the list that is created by <code>group_map()</code>. So while we can see in our output which element of <code>lm_results</code> contains which <code>lm</code> model, we cannot easily access these elements with the <code>$</code> operator, nor can we quickly iterate over each element like we could do previously.</p>
<p>Thankfully, the solution again is simple: if we use <code>flatten()</code> on our <code>group_map()</code> result, it will remove the nested layers that have in our list and put all the elements in one single layer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten</span>(lm_results)</span>
<span id="cb6-2"></span>
<span id="cb6-3">lm_results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$setosa

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     1.3276       0.5465  


$versicolor

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
      1.781        1.869  


$virginica

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     4.2407       0.6473  </code></pre>
</div>
</div>
<p>And now we all of our regression results packaged neatly into one, with each element clearly labelled as so:</p>
<p><img src="https://amackay.netlify.app/posts/Group Map Named List/screenshot.png" class="img-fluid"></p>



 ]]></description>
  <category>iteration</category>
  <category>purrr</category>
  <category>map</category>
  <guid>https://amackay.netlify.app/posts/Group Map Named List/index.html</guid>
  <pubDate>Mon, 11 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Group Map Named List/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Accurately Viewing and Saving Plots using Camcorder</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Accurately Viewing and Saving Plots with Camcorder/index.html</link>
  <description><![CDATA[ 




<p>Something I have always struggled with ggplot is after I have spent how many hours tinkering and finessing a plot, I will export it</p>
<p>THIS IS A TEST</p>



 ]]></description>
  <category>ggplot2</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Accurately Viewing and Saving Plots with Camcorder/index.html</guid>
  <pubDate>Sat, 11 Nov 2023 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Super Helpful Very Little Tips and Tricks</title>
  <dc:creator>Az </dc:creator>
  <link>https://amackay.netlify.app/posts/Super Helpful Very Little Tips and Tricks/post.html</link>
  <description><![CDATA[ 




<section id="paste-windows-file-directory" class="level1">
<h1>Paste Windows File Directory</h1>
<p>Something about how annoying the backslashes are etc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readClipboard</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2021\t 143,032 \t 243,176 " "2022\t 148,153 \t 249,769 "
 [3] "2023\t 152,999 \t 256,275 " "2024\t 158,001 \t 263,121 "
 [5] "2025\t 163,048 \t 270,302 " "2026\t 168,403 \t 278,048 "
 [7] "2027\t 174,322 \t 286,863 " "2028\t 179,888 \t 295,495 "
 [9] "2029\t 185,526 \t 304,526 " "2030\t 191,171 \t 313,759 "
[11] "2031\t 197,013 \t 323,327 " "2032\t 203,332 \t 333,890 "
[13] "2033\t 209,004 \t 343,690 " "2034\t 214,549 \t 353,594 "
[15] "2035\t 219,854 \t 363,321 " "2036\t 225,278 \t 373,119 "
[17] "2037\t 231,106 \t 384,012 " "2038\t 236,280 \t 393,893 "
[19] "2039\t 240,905 \t 402,916 " "2040\t 245,281 \t 411,606 "</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">paste.path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-2">  raw_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readClipboard</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(raw_dir)) {</span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oops, your clipboard appears to be empty"</span>)</span>
<span id="cb3-6">  }</span>
<span id="cb3-7"></span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(raw_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)) {</span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hmm it seems you haven't provided a windows file directory path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{format(raw_dir)}"</span>))</span>
<span id="cb3-10">  }</span>
<span id="cb3-11"></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(raw_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb3-13">}</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/Super Helpful Very Little Tips and Tricks/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a ggplot2 theme</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Adding Summary Statistics/post.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://stackoverflow.com/questions/15720545/use-stat-summary-to-annotate-plot-with-number-of-observations"</span></span>
<span id="cb1-3">  </span>
<span id="cb1-4">}</span></code></pre></div>
</div>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Adding Summary Statistics/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlighting In ggplot</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Quickly highlighting ggplot columns/post.html</link>
  <description><![CDATA[ 




<p>Highlighting specific columns in ggplot is a useful</p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Quickly highlighting ggplot columns/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a ggplot2 theme</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Setting up a ggplot2 theme/post.html</link>
  <description><![CDATA[ 




<p>Creating a ggplot2 theme is a cool thing to do.</p>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Setting up a ggplot2 theme/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/Capturing Warnings/index.html</link>
  <description><![CDATA[ 




<p>Capturing Warnings is like super useful and stuff.</p>
<ul>
<li><p>withCallingHandlers()</p></li>
<li><p>tryCatch()</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://amackay.netlify.app/posts/Capturing Warnings/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Capturing Warnings/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/Quarto Tips/index.html</link>
  <description><![CDATA[ 




<p>Use <code>knitr::opts_chunk$set(echo = , warning = , message = )</code> to set a default chunk option</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://amackay.netlify.app/posts/Quarto Tips/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Quarto Tips/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>WoRkflow</title>
  <dc:creator>Aaron Mackay</dc:creator>
  <link>https://amackay.netlify.app/posts/r-workflow/index.html</link>
  <description><![CDATA[ 




<p>Getting the right workflow in R is hard.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/r-workflow/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/r-workflow/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/index.html</guid>
  <pubDate>Sat, 26 Aug 2023 14:00:00 GMT</pubDate>
</item>
</channel>
</rss>
