<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Aaron Mackay</title>
<link>https://amackay.netlify.app/blog.html</link>
<atom:link href="https://amackay.netlify.app/blog.xml" rel="self" type="application/rss+xml"/>
<description>Data Science Blog by me... Aaron</description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Mon, 25 Mar 2024 13:00:00 GMT</lastBuildDate>
<item>
  <title>Text Pre-Processing</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/NLP/Text Pre-Processing/text_pre-processing.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DiagrammeR)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grViz</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  digraph {</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  layout = dot</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  node [shape = rectangle,style=filled,fixedsize=False]</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  edge[color=grey,arrowhead=vee]</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A[label = 'Corpus']</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B[label = 'Pre-Processing']</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  C[label = 'Tokenisation']</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  D[label = 'Stop Word Removal']</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  E[label = 'Stemming/Lemmatisation']</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A-&gt;B</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;C</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;D</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;E</span></span>
<span id="cb1-18"></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-ac6d8dc5ad05f96a4d21" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-ac6d8dc5ad05f96a4d21">{"x":{"diagram":"\n  digraph {\n  layout = dot\n  node [shape = rectangle,style=filled,fixedsize=False]\n  edge[color=grey,arrowhead=vee]\n  A[label = \"Corpus\"]\n  B[label = \"Pre-Processing\"]\n  C[label = \"Tokenisation\"]\n  D[label = \"Stop Word Removal\"]\n  E[label = \"Stemming/Lemmatisation\"]\n\n  A->B\n  B->C\n  B->D\n  B->E\n\n\n  }\n   ","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<p>Text, like all data, comes in a messy format. Whether that text be a collection of blog posts, newspaper articles, a book, the text must be prepared and organised in a format that will make it more efficient to apply further techniques to it.</p>
<p>In this section we cover the key steps involved in text pre-processing:</p>
<ol type="1">
<li><strong>Tokenisation:</strong> Splitting text into individual tokens. A “token” is the smallest attribute that you are interested in. Usually it is a word, however it could be a character, or sentence and beyond.</li>
<li><strong>Stop Word Removal:</strong> <em>Stop Words</em> are words that are considered insignificant to understanding the meaning of a sentence, but are required to help form a sentence. There is no universal list of stop words, however common stop words include “a”, “but”, “an”, “it”, “the”, “that” and so on.</li>
<li><strong>Stemming or Lemmatisation:</strong> Both stemming and lemmatisation are methods to reduce words down to their base or root. For example, “fishing”, “fishes”, and “fished” will all become just “fish”<em>.</em> &lt;u&gt;Stemming&lt;/u&gt; reduces words to their stem just by looking at the suffix of the word, while <u>lemmatisation</u> reduces words to their base or “lemma” by considering the word and the context in which it appears. For example in stemming, the word “caring” would be reduced to the word “car”, however in lemmatisation it would be reduced to “care” (the correct form). Given its increased accuracy, Lemmatisation is the tool we shall use.</li>
</ol>
<section id="packages-and-data" class="level2">
<h2 class="anchored" data-anchor-id="packages-and-data">Packages and Data</h2>
<p>Text pre-processing will be done with the <strong>{tidytext}</strong> and <strong>{textstem}</strong> packages. The data-set we are using for text pre-processing is the book of Matthew from the New Testament of the King James Bible. We will access this through the <code>new_testament()</code> function in the <strong>{scriptuRs}</strong> package.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidyverse)</span>
<span id="cb2-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(tidytext)</span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(textstem)</span>
<span id="cb2-4"></span>
<span id="cb2-5">newtest_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> scriptuRs<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>new_testament <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tibble</span>()</span>
<span id="cb2-6">matthew_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> newtest_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb2-7">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filter</span>(book_title <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Matthew"</span>)</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(matthew_df)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 1,071
Columns: 19
$ volume_id          &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …
$ book_id            &lt;dbl&gt; 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,…
$ chapter_id         &lt;dbl&gt; 930, 930, 930, 930, 930, 930, 930, 930, 930, 930, 9…
$ verse_id           &lt;dbl&gt; 23146, 23147, 23148, 23149, 23150, 23151, 23152, 23…
$ volume_title       &lt;chr&gt; "New Testament", "New Testament", "New Testament", …
$ book_title         &lt;chr&gt; "Matthew", "Matthew", "Matthew", "Matthew", "Matthe…
$ volume_long_title  &lt;chr&gt; "The New Testament", "The New Testament", "The New …
$ book_long_title    &lt;chr&gt; "The Gospel According to St Matthew", "The Gospel A…
$ volume_subtitle    &lt;chr&gt; "Of our Lord and Saviour Jesus Christ", "Of our Lor…
$ book_subtitle      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ volume_short_title &lt;chr&gt; "NT", "NT", "NT", "NT", "NT", "NT", "NT", "NT", "NT…
$ book_short_title   &lt;chr&gt; "Matt.", "Matt.", "Matt.", "Matt.", "Matt.", "Matt.…
$ volume_lds_url     &lt;chr&gt; "nt", "nt", "nt", "nt", "nt", "nt", "nt", "nt", "nt…
$ book_lds_url       &lt;chr&gt; "matt", "matt", "matt", "matt", "matt", "matt", "ma…
$ chapter_number     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …
$ verse_number       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, …
$ text               &lt;chr&gt; "THE book of the generation of Jesus Christ, the so…
$ verse_title        &lt;chr&gt; "Matthew 1:1", "Matthew 1:2", "Matthew 1:3", "Matth…
$ verse_short_title  &lt;chr&gt; "Matt. 1:1", "Matt. 1:2", "Matt. 1:3", "Matt. 1:4",…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">matthew_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">summarise</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">mean.verse.length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mean</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)),</span>
<span id="cb4-3">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">min.verse.length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">min</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)),</span>
<span id="cb4-4">            <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">max.verse.length =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">max</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_count</span>(text, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">pattern =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">w+"</span>)))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1 × 3
  mean.verse.length min.verse.length max.verse.length
              &lt;dbl&gt;            &lt;int&gt;            &lt;int&gt;
1              22.2                6               54</code></pre>
</div>
</div>
<p>Each row of our dataset corresponds to a verse within the book of Matthew. A verse contains on average, 22.2 words.</p>
</section>
<section id="tokenisation" class="level2">
<h2 class="anchored" data-anchor-id="tokenisation">Tokenisation</h2>
<p>The <code>unnest_tokens()</code> function from the <strong>{tidytext}</strong> package quickly extracts the tokens from our dataset. In this case (as in most cases), the token level that we are interested in is “words”.</p>
<p>Given “words” is the default token (identified through the <code>token</code> argument, we just need to identify the <strong>input</strong> (the text column name; in this instance it is simply called <code>text</code>) and the <strong>output</strong> (the name of the new column that will contain each token; in this instance we will call it “word”)</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">matthew_tokens <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matthew_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb6-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text,</span>
<span id="cb6-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>)</span>
<span id="cb6-4"></span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">glimpse</span>(matthew_tokens)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Rows: 23,685
Columns: 19
$ volume_id          &lt;dbl&gt; 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, …
$ book_id            &lt;dbl&gt; 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40, 40,…
$ chapter_id         &lt;dbl&gt; 930, 930, 930, 930, 930, 930, 930, 930, 930, 930, 9…
$ verse_id           &lt;dbl&gt; 23146, 23146, 23146, 23146, 23146, 23146, 23146, 23…
$ volume_title       &lt;chr&gt; "New Testament", "New Testament", "New Testament", …
$ book_title         &lt;chr&gt; "Matthew", "Matthew", "Matthew", "Matthew", "Matthe…
$ volume_long_title  &lt;chr&gt; "The New Testament", "The New Testament", "The New …
$ book_long_title    &lt;chr&gt; "The Gospel According to St Matthew", "The Gospel A…
$ volume_subtitle    &lt;chr&gt; "Of our Lord and Saviour Jesus Christ", "Of our Lor…
$ book_subtitle      &lt;chr&gt; NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA,…
$ volume_short_title &lt;chr&gt; "NT", "NT", "NT", "NT", "NT", "NT", "NT", "NT", "NT…
$ book_short_title   &lt;chr&gt; "Matt.", "Matt.", "Matt.", "Matt.", "Matt.", "Matt.…
$ volume_lds_url     &lt;chr&gt; "nt", "nt", "nt", "nt", "nt", "nt", "nt", "nt", "nt…
$ book_lds_url       &lt;chr&gt; "matt", "matt", "matt", "matt", "matt", "matt", "ma…
$ chapter_number     &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …
$ verse_number       &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, …
$ verse_title        &lt;chr&gt; "Matthew 1:1", "Matthew 1:1", "Matthew 1:1", "Matth…
$ verse_short_title  &lt;chr&gt; "Matt. 1:1", "Matt. 1:1", "Matt. 1:1", "Matt. 1:1",…
$ word               &lt;chr&gt; "the", "book", "of", "the", "generation", "of", "je…</code></pre>
</div>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb8-1">token_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matthew_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb8-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>,</span>
<span id="cb8-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text,</span>
<span id="cb8-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb8-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span>
<span id="cb8-6"></span>
<span id="cb8-7"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(token_count)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  word      n
  &lt;chr&gt; &lt;int&gt;
1 and    1552
2 the    1405
3 of      672
4 unto    435
5 he      412
6 that    388</code></pre>
</div>
</div>
<p>Now we have a data frame <code>matthew_tokens</code> where each row corresponds to a word (identified in the column <code>word</code>) within each verse.</p>
<p>Now, we can use <code>count()</code> to see what the most common words are:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb10-1">matthew_tokens <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb10-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb10-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 6 × 2
  word      n
  &lt;chr&gt; &lt;int&gt;
1 and    1552
2 the    1405
3 of      672
4 unto    435
5 he      412
6 that    388</code></pre>
</div>
</div>
<p>As the output above shows, the most common words don’t give us any insight into what the themes of the text are. Most of the words in this list are common “stop words”. They are words that need to be removed before we can continue with any further processing or analyses.</p>
<section id="stop-word-removal" class="level3">
<h3 class="anchored" data-anchor-id="stop-word-removal">Stop Word Removal</h3>
<p>Before we can remove any stop words from our dataset, we first need to identify a collection of words that are considered <em>stop words.</em> Thankfully, the <strong>{tidytext} package</strong></p>
<p>We use the anti_join function and the stop_words dataset from the tidytext package</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb12-1">token_count <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matthew_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>,</span>
<span id="cb12-3">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text,</span>
<span id="cb12-4">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-5">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb12-6">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(word, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(word)`</code></pre>
</div>
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb14-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">head</span>(token_count, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 10 × 2
   word          n
   &lt;chr&gt;     &lt;int&gt;
 1 ye          263
 2 jesus       172
 3 thou        151
 4 thee        100
 5 thy          90
 6 son          78
 7 heaven       76
 8 lord         76
 9 disciples    71
10 behold       60</code></pre>
</div>
</div>
<p>And now we get a much greater understanding as to what themes this text contains. No surprise here that this text.</p>
</section>
<section id="stemming" class="level3">
<h3 class="anchored" data-anchor-id="stemming">Stemming</h3>
<p><code>wordStem()</code> from the {SnowballC} package.</p>
</section>
<section id="lemmatisation" class="level3">
<h3 class="anchored" data-anchor-id="lemmatisation">Lemmatisation</h3>
<ul>
<li>{udpipe} package - actually can use lemmatize_words from tidytext</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb16-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># library(udpipe)</span></span>
<span id="cb16-2"></span>
<span id="cb16-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># udmodel &lt;- udpipe::udpipe_download_model(language = "english")</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">matthew_token <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> matthew_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-6">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">unnest_tokens</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">output =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"word"</span>,</span>
<span id="cb16-7">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">input =</span> text,</span>
<span id="cb16-8">                <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">token =</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"words"</span>) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb16-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">anti_join</span>(stop_words)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Joining with `by = join_by(word)`</code></pre>
</div>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb18-1">matthew_token <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mutate</span>(<span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">lemma =</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lemmatize_words</span>(word)) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb18-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">count</span>(lemma, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">sort =</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">TRUE</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code># A tibble: 1,471 × 2
   lemma        n
   &lt;chr&gt;    &lt;int&gt;
 1 ye         263
 2 jesus      172
 3 thou       151
 4 you        100
 5 thy         90
 6 son         82
 7 heaven      78
 8 lord        76
 9 disciple    75
10 behold      62
# ℹ 1,461 more rows</code></pre>
</div>
</div>
</section>
</section>
<section id="text-representation" class="level2">
<h2 class="anchored" data-anchor-id="text-representation">Text Representation</h2>
<p>[Text here]</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Bad-of-words model</p></li>
<li><p>Term Frequency - Inverse Document Frequency (TF-IDF)</p></li>
<li><p>Word embeddings (word2vec, GloVe)</p></li>
<li><p>Contextual embeddings (BERT, GPT)</p></li>
</ul>
</section>
<section id="topic-modeling" class="level2">
<h2 class="anchored" data-anchor-id="topic-modeling">Topic Modeling</h2>
<p>Identify themes or topics present in a collection of documents</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li>Latent Dirichlet Allocation (LDA)</li>
</ul>
<section id="topic-modeling-1" class="level3">
<h3 class="anchored" data-anchor-id="topic-modeling-1">Topic Modeling</h3>
<p><strong>Learning Outcomes:</strong> Identify and extract the underlying themes or topics present in a corpus.</p>


</section>
</section>

 ]]></description>
  <category>NLP</category>
  <guid>https://amackay.netlify.app/posts/NLP/Text Pre-Processing/text_pre-processing.html</guid>
  <pubDate>Mon, 25 Mar 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>NLP Outline</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/NLP/Outline/outline.html</link>
  <description><![CDATA[ 




<p>Rather than try and “learn everything I can” about Natural Language Processing, I figured the better method would be to first outline my goals in learning NLP. From here, I can design a program that will enable me to achieve these goals as efficiently as possible.</p>
<p>In short then, my main goal for learning NLP is to be able to extract key themes from a collection of documents (known in NLP-speak as a “corpus”). I want to be able to input a corpus into a model, which will then identify and extract themes or topics, both across the corpus as a whole and within documents in the corpus. These themes should be quantified in terms of their importance.</p>
<p>A quick bit of research has indicated that <strong>Topic Modeling</strong> is the technique that I need to become familiar with.</p>
<p>Topic modeling is a statistical model that identifies the unique themes (or “topics”) that are present in a collection of documents. These topics are identified and their importance quantified by the number of similar words that pertain to that topic in a document. The end result is an extraction of the topics in a corpus as well as the balance of topic’s within each document.</p>
<p>To understand and utilise topic modeling, there are number of pre-requisite skills that I will need to understand first.</p>
<p>Throughout this series I will be working with the New Testament from the King James bible, from the package <code>scripturRs</code>.</p>
<section id="syllabus" class="level1">
<h1>Syllabus:</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(DiagrammeR)</span>
<span id="cb1-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#| echo: false</span></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">grViz</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb1-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  digraph {</span></span>
<span id="cb1-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  layout = dot</span></span>
<span id="cb1-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  node [shape = rectangle,style=filled,fixedsize=False]</span></span>
<span id="cb1-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  edge[color=grey,arrowhead=vee]</span></span>
<span id="cb1-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A[label = 'Corpus']</span></span>
<span id="cb1-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B[label = 'Pre-Processing']</span></span>
<span id="cb1-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  C[label = 'Tokenisation']</span></span>
<span id="cb1-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  D[label = 'Stop Word Removal']</span></span>
<span id="cb1-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  E[label = 'Stemming/Lemmatisation']</span></span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F[label = 'Text Representation']</span></span>
<span id="cb1-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  G[label = 'Bag-of-Words']</span></span>
<span id="cb1-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  J[label = 'Contextual Embeddings']</span></span>
<span id="cb1-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  H[label = 'TF-IDF']</span></span>
<span id="cb1-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  I[label = 'Word Embeddings']</span></span>
<span id="cb1-19"></span>
<span id="cb1-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  K[label = 'Topic Modeling']</span></span>
<span id="cb1-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  L[label = 'LDA']</span></span>
<span id="cb1-22"></span>
<span id="cb1-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  A-&gt;B</span></span>
<span id="cb1-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;C</span></span>
<span id="cb1-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;D</span></span>
<span id="cb1-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  B-&gt;E</span></span>
<span id="cb1-27"></span>
<span id="cb1-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  rank=same {B-&gt;F}</span></span>
<span id="cb1-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;G</span></span>
<span id="cb1-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;H</span></span>
<span id="cb1-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  F-&gt;I</span></span>
<span id="cb1-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  G-&gt;J</span></span>
<span id="cb1-33"></span>
<span id="cb1-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  rank=same {F-&gt;K}</span></span>
<span id="cb1-35"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  K-&gt;L</span></span>
<span id="cb1-36"></span>
<span id="cb1-37"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  }</span></span>
<span id="cb1-38"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">   "</span>)</span></code></pre></div>
<div class="cell-output-display">
<div class="grViz html-widget html-fill-item" id="htmlwidget-bb22cf8adfa22e48edb3" style="width:100%;height:464px;"></div>
<script type="application/json" data-for="htmlwidget-bb22cf8adfa22e48edb3">{"x":{"diagram":"\n  digraph {\n  layout = dot\n  node [shape = rectangle,style=filled,fixedsize=False]\n  edge[color=grey,arrowhead=vee]\n  A[label = \"Corpus\"]\n  B[label = \"Pre-Processing\"]\n  C[label = \"Tokenisation\"]\n  D[label = \"Stop Word Removal\"]\n  E[label = \"Stemming/Lemmatisation\"]\n\n  F[label = \"Text Representation\"]\n  G[label = \"Bag-of-Words\"]\n  J[label = \"Contextual Embeddings\"]\n  H[label = \"TF-IDF\"]\n  I[label = \"Word Embeddings\"]\n\n  K[label = \"Topic Modeling\"]\n  L[label = \"LDA\"]\n\n  A->B\n  B->C\n  B->D\n  B->E\n\n  rank=same {B->F}\n  F->G\n  F->H\n  F->I\n  G->J\n\n  rank=same {F->K}\n  K->L\n\n  }\n   ","config":{"engine":"dot","options":null}},"evals":[],"jsHooks":[]}</script>
</div>
</div>
<section id="text-pre-processing" class="level2">
<h2 class="anchored" data-anchor-id="text-pre-processing">Text Pre-Processing</h2>
<p>Clean and pre-process text data to remove noise, irrelevant information and standardise the format for further processing and analysis.</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Tokenisation</p></li>
<li><p>Stopword removal</p></li>
<li><p>Stemming</p></li>
<li><p>Lemmatisation</p></li>
</ul>
</section>
<section id="text-representation" class="level2">
<h2 class="anchored" data-anchor-id="text-representation">Text Representation</h2>
<p>After pre-processing, the text must be converted into a format that will allow for more complex analysis. This usually involves attributing a quantitative value to the text (either specific words, words within documents or documents within a corpus).</p>
<p><strong>Learning Outcomes:</strong></p>
<ul>
<li><p>Bad-of-words model</p></li>
<li><p>Term Frequency - Inverse Document Frequency (TF-IDF)</p></li>
<li><p>Word embeddings (word2vec, GloVe)</p></li>
<li><p>Contextual embeddings (BERT, GPT)</p></li>
</ul>
</section>
<section id="topic-modeling" class="level2">
<h2 class="anchored" data-anchor-id="topic-modeling">Topic Modeling</h2>
<p>Once the text has been pre-processed and is now in a format that computers and statistical models will understand, we can apply these models to extract the topics that are contained within our text.</p>
<p>The most popular model for achieving this seems to be <strong>Latent Dirichlet Allocation (LDA)</strong>.</p>


</section>
</section>

 ]]></description>
  <category>NLP</category>
  <guid>https://amackay.netlify.app/posts/NLP/Outline/outline.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Introduction to the Series</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/workflow/intro to series/intro.html</link>
  <description><![CDATA[ 




<p>This series will focus on my thoughts and methods around structuring R studio projects with little side-quests on things like working with git and documentation.</p>
<p>In the five or so years that I have been using R, I have found there to be a surprising lack of resources on this topic (though two resources I have found helpful are <a href="https://rfortherestofus.com/2021/08/rstudio-project-structure/">this post by David Keyes</a> - notably his take on how to write a README file, and this <a href="https://hbiostat.org/rflow/">in depth guide on Reproducible Data Analysis and Reporting by Frank E Harrell Jr</a>) and so I thought I would share what I have learnt (and am still learning!) along my R journey.</p>
<p>This series will likely be a perpetual work-in-progress as I continue to learn and refine my approach and I am very much open to feedback on improving the workflow presented here.</p>
<p>In brief, some of the topics I expect to cover in the coming weeks include:</p>
<ol type="1">
<li>Setting up a project template</li>
<li>Housing the project template in a package to be called when you want to start a new project</li>
<li>A bit on <code>Renv</code> and reproducible environments</li>
<li>A bit on saving and loading objects with <code>qs</code></li>
</ol>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/workflow/intro to series/intro.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Structuring your R Project</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/workflow/project structure/project-structure.html</link>
  <description><![CDATA[ 







 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/workflow/project structure/project-structure.html</guid>
  <pubDate>Thu, 18 Jan 2024 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/post-with-code/index.html</link>
  <description><![CDATA[ 




<p>This is a post with executable code.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/post-with-code/index.html</guid>
  <pubDate>Thu, 11 Jan 2024 13:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/post-with-code/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Named Lists from Group Maps</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/Group Map Named List/index.html</link>
  <description><![CDATA[ 




<p>The <code>group_map()</code> function is one of my favourite iterative functions within the <code>purrr</code> package. Like the other iterative functions within the purrr-verse, it has been designed to be simple and intuitive.</p>
<p>In a nutshell, <code>group_map()</code> applies a function over each group of a grouped dataframe and returns a list containing the function result per group. This is great when we want to…well apply a function on a per group basis.</p>
<p>As a quick example, say we want to run a regression to pedict petal length with petal width for each class of species using data in the <code>iris</code> dataset. A <code>group_map()</code> will allow you to do this, and save the outcome in one object so that you can quickly access each regression outcome.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(dplyr)</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">library</span>(purrr)</span>
<span id="cb1-3"></span>
<span id="cb1-4">iris_df <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> datasets<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>iris <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">as_tibble</span>()</span>
<span id="cb1-5"></span>
<span id="cb1-6">lm_formula <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">formula</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Petal.Length ~ Petal.Width"</span>)</span>
<span id="cb1-7"></span>
<span id="cb1-8">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-9">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb1-10">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_map</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dat, group) {</span>
<span id="cb1-11">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(lm_formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat)</span>
<span id="cb1-12">  })</span></code></pre></div>
</div>
<p>And now we can quickly access our <code>lm</code> results by calling <code>lm_results</code>. Combining this with <code>broom</code>’s <code>tidy</code> in a <code>map()</code> means you can quickly see the key results of each regression.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">map</span>(lm_results, broom<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span>tidy)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
# A tibble: 2 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)    1.33     0.0600     22.1  7.68e-27
2 Petal.Width    0.546    0.224       2.44 1.86e- 2

[[2]]
# A tibble: 2 × 5
  term        estimate std.error statistic  p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;
1 (Intercept)     1.78     0.284      6.28 9.48e- 8
2 Petal.Width     1.87     0.212      8.83 1.27e-11

[[3]]
# A tibble: 2 × 5
  term        estimate std.error statistic       p.value
  &lt;chr&gt;          &lt;dbl&gt;     &lt;dbl&gt;     &lt;dbl&gt;         &lt;dbl&gt;
1 (Intercept)    4.24      0.561      7.56 0.00000000104
2 Petal.Width    0.647     0.275      2.36 0.0225       </code></pre>
</div>
</div>
<p>Here you may notice the key issue for which this week’s blog post is designed to address: How can you tell which result corresponds to which group?</p>
<p>The solution is reasonably simple: Create a list that contains the <code>lm</code> object and set the element names of the list to be the current group.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb4-1">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> iris_df <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-2">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_by</span>(Species) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-3">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">group_map</span>(<span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>(dat, group) {</span>
<span id="cb4-4">    model <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">lm</span>(lm_formula, <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">data =</span> dat)</span>
<span id="cb4-5">    </span>
<span id="cb4-6">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Place the lm model into a list and set the name to be the current group</span></span>
<span id="cb4-7">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">list</span>(model) <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> </span>
<span id="cb4-8">      <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">setNames</span>(group<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">$</span>Species)</span>
<span id="cb4-9">  })</span>
<span id="cb4-10"></span>
<span id="cb4-11">lm_results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[[1]]
[[1]]$setosa

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     1.3276       0.5465  



[[2]]
[[2]]$versicolor

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
      1.781        1.869  



[[3]]
[[3]]$virginica

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     4.2407       0.6473  </code></pre>
</div>
</div>
<p>And now you can see which <code>lm</code> model corresponds to which species group. However what this has done is added each named list element to the list that is created by <code>group_map()</code>. So while we can see in our output which element of <code>lm_results</code> contains which <code>lm</code> model, we cannot easily access these elements with the <code>$</code> operator, nor can we quickly iterate over each element like we could do previously.</p>
<p>Thankfully, the solution again is simple: if we use <code>flatten()</code> on our <code>group_map()</code> result, it will remove the nested layers that have in our list and put all the elements in one single layer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb6-1">lm_results <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">flatten</span>(lm_results)</span>
<span id="cb6-2"></span>
<span id="cb6-3">lm_results</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>$setosa

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     1.3276       0.5465  


$versicolor

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
      1.781        1.869  


$virginica

Call:
lm(formula = lm_formula, data = dat)

Coefficients:
(Intercept)  Petal.Width  
     4.2407       0.6473  </code></pre>
</div>
</div>
<p>And now we all of our regression results packaged neatly into one, with each element clearly labelled as so:</p>
<p><img src="https://amackay.netlify.app/posts/Group Map Named List/screenshot.png" class="img-fluid"></p>



 ]]></description>
  <category>iteration</category>
  <category>purrr</category>
  <category>map</category>
  <guid>https://amackay.netlify.app/posts/Group Map Named List/index.html</guid>
  <pubDate>Mon, 11 Dec 2023 13:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Group Map Named List/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Accurately Viewing and Saving Plots using Camcorder</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Accurately Viewing and Saving Plots with Camcorder/index.html</link>
  <description><![CDATA[ 




<p>Something I have always struggled with ggplot is after I have spent how many hours tinkering and finessing a plot, I will export it</p>
<p>THIS IS A TEST</p>



 ]]></description>
  <category>ggplot2</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Accurately Viewing and Saving Plots with Camcorder/index.html</guid>
  <pubDate>Sat, 11 Nov 2023 13:00:00 GMT</pubDate>
</item>
<item>
  <title>Super Helpful Very Little Tips and Tricks</title>
  <dc:creator>Az </dc:creator>
  <link>https://amackay.netlify.app/posts/Super Helpful Very Little Tips and Tricks/post.html</link>
  <description><![CDATA[ 




<section id="paste-windows-file-directory" class="level1">
<h1>Paste Windows File Directory</h1>
<p>Something about how annoying the backslashes are etc.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readClipboard</span>() <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%&gt;%</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code> [1] "2021\t 143,032 \t 243,176 " "2022\t 148,153 \t 249,769 "
 [3] "2023\t 152,999 \t 256,275 " "2024\t 158,001 \t 263,121 "
 [5] "2025\t 163,048 \t 270,302 " "2026\t 168,403 \t 278,048 "
 [7] "2027\t 174,322 \t 286,863 " "2028\t 179,888 \t 295,495 "
 [9] "2029\t 185,526 \t 304,526 " "2030\t 191,171 \t 313,759 "
[11] "2031\t 197,013 \t 323,327 " "2032\t 203,332 \t 333,890 "
[13] "2033\t 209,004 \t 343,690 " "2034\t 214,549 \t 353,594 "
[15] "2035\t 219,854 \t 363,321 " "2036\t 225,278 \t 373,119 "
[17] "2037\t 231,106 \t 384,012 " "2038\t 236,280 \t 393,893 "
[19] "2039\t 240,905 \t 402,916 " "2040\t 245,281 \t 411,606 "</code></pre>
</div>
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb3-1">paste.path <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">function</span>() {</span>
<span id="cb3-2">  raw_dir <span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">&lt;-</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">readClipboard</span>()</span>
<span id="cb3-3"></span>
<span id="cb3-4">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">is.null</span>(raw_dir)) {</span>
<span id="cb3-5">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Oops, your clipboard appears to be empty"</span>)</span>
<span id="cb3-6">  }</span>
<span id="cb3-7"></span>
<span id="cb3-8">  <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_detect</span>(raw_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)) {</span>
<span id="cb3-9">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">stop</span>(stringr<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">::</span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_glue</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hmm it seems you haven't provided a windows file directory path: </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">{format(raw_dir)}"</span>))</span>
<span id="cb3-10">  }</span>
<span id="cb3-11"></span>
<span id="cb3-12">  <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">str_replace_all</span>(raw_dir, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\\\\</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb3-13">}</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/Super Helpful Very Little Tips and Tricks/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a ggplot2 theme</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Adding Summary Statistics/post.html</link>
  <description><![CDATA[ 




<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span>(<span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">FALSE</span>) {</span>
<span id="cb1-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://stackoverflow.com/questions/15720545/use-stat-summary-to-annotate-plot-with-number-of-observations"</span></span>
<span id="cb1-3">  </span>
<span id="cb1-4">}</span></code></pre></div>
</div>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Adding Summary Statistics/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Highlighting In ggplot</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Quickly highlighting ggplot columns/post.html</link>
  <description><![CDATA[ 




<p>Highlighting specific columns in ggplot is a useful</p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Quickly highlighting ggplot columns/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Creating a ggplot2 theme</title>
  <dc:creator>Aaron </dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Setting up a ggplot2 theme/post.html</link>
  <description><![CDATA[ 




<p>Creating a ggplot2 theme is a cool thing to do.</p>



 ]]></description>
  <category>ggplot</category>
  <category>dataviz</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Setting up a ggplot2 theme/post.html</guid>
  <pubDate>Mon, 04 Sep 2023 14:00:00 GMT</pubDate>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/Capturing Warnings/index.html</link>
  <description><![CDATA[ 




<p>Capturing Warnings is like super useful and stuff.</p>
<ul>
<li><p>withCallingHandlers()</p></li>
<li><p>tryCatch()</p></li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://amackay.netlify.app/posts/Capturing Warnings/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Capturing Warnings/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Post With Code</title>
  <dc:creator>Harlow Malloc</dc:creator>
  <link>https://amackay.netlify.app/posts/Quarto Tips/index.html</link>
  <description><![CDATA[ 




<p>Use <code>knitr::opts_chunk$set(echo = , warning = , message = )</code> to set a default chunk option</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>news</category>
  <category>code</category>
  <category>analysis</category>
  <guid>https://amackay.netlify.app/posts/Quarto Tips/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/Quarto Tips/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>WoRkflow</title>
  <dc:creator>Aaron Mackay</dc:creator>
  <link>https://amackay.netlify.app/posts/r-workflow/index.html</link>
  <description><![CDATA[ 




<p>Getting the right workflow in R is hard.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode r code-with-copy"><code class="sourceCode r"><span id="cb1-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[1] 2</code></pre>
</div>
</div>



 ]]></description>
  <category>workflow</category>
  <guid>https://amackay.netlify.app/posts/r-workflow/index.html</guid>
  <pubDate>Tue, 29 Aug 2023 14:00:00 GMT</pubDate>
  <media:content url="https://amackay.netlify.app/posts/r-workflow/image.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Welcome To My Blog</title>
  <dc:creator>Tristan O&#39;Malley</dc:creator>
  <link>https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/index.html</link>
  <description><![CDATA[ 




<p>This is the first post in a Quarto blog. Welcome!</p>
<p><img src="https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/thumbnail.jpg" class="img-fluid"></p>
<p>Since this post doesn’t specify an explicit <code>image</code>, the first image in the post will be used in the listing page of posts.</p>



 ]]></description>
  <category>news</category>
  <guid>https://amackay.netlify.app/posts/ggplot2/Quickest way to add text to ggplot/index.html</guid>
  <pubDate>Sat, 26 Aug 2023 14:00:00 GMT</pubDate>
</item>
</channel>
</rss>
