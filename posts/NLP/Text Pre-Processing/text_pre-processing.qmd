---
title: "Text Pre-Processing"
date: "2024-03-26"
categories: [NLP]
editor_options: 
  chunk_output_type: console
footnotes-hover: true
execute: 
  warning: false
---

```{r}
#| echo: false
library(DiagrammeR)
grViz("
  digraph {
  layout = dot
  node [shape = rectangle,style=filled,fixedsize=False]
  edge[color=grey,arrowhead=vee]
  A[label = 'Corpus']
  B[label = 'Pre-Processing']
  C[label = 'Tokenisation']
  D[label = 'Stop Word Removal']
  E[label = 'Stemming/Lemmatisation']

  A->B
  B->C
  B->D
  B->E


  }
   ")
```

Text, like all data, comes in a messy format. Whether that text be a collection of blog posts, newspaper articles, a book, the text must be prepared and organised in a format that will make it more efficient to apply further techniques to it.

In this section we cover the key steps involved in text pre-processing:

1.  **Tokenisation:** Splitting text into individual tokens. A "token" is the smallest attribute that you are interested in. Usually it is a word, however it could be a character, or sentence and beyond.
2.  **Stop Word Removal:** *Stop Words* are words that are considered insignificant to understanding the meaning of a sentence, but are required to help form a sentence. There is no universal list of stop words, however common stop words include "a", "but", "an", "it", "the", "that" and so on.
3.  **Stemming or Lemmatisation:** Both stemming and lemmatisation are methods to reduce words down to their base or root. For example, "fishing", "fishes", and "fished" will all become just "fish"*.* \<u\>Stemming\</u\> reduces words to their stem just by looking at the suffix of the word, while <u>lemmatisation</u> reduces words to their base or "lemma" by considering the word and the context in which it appears. For example in stemming, the word "caring" would be reduced to the word "car", however in lemmatisation it would be reduced to "care" (the correct form). Given its increased accuracy, Lemmatisation is the tool we shall use.

## Packages and Data

Text pre-processing will be done with the **{tidytext}** and **{textstem}** packages. The data-set we are using for text pre-processing is the New Testament from the King James Bible. We will access this through the <code>new_testament()</code> function in the **{scriptuRs}** package.

```{r}
#| label: load-packages
#| warning: false
library(tidyverse)
library(tidytext)
library(textstem)

newtest_df <- scriptuRs::new_testament %>% tibble()

glimpse(newtest_df)

newtest_df %>% 
  summarise(mean.verse.length = mean(str_count(text, pattern = "\\w+")),
            min.verse.length = min(str_count(text, pattern = "\\w+")),
            max.verse.length = max(str_count(text, pattern = "\\w+")))
```

Each row of our dataset corresponds to a verse within the New Testament. A verse contains on average, 22.7 words.

## Tokenisation

The <code>unnest_tokens()</code> function from the **{tidytext}** package quickly extracts the tokens from our dataset. In this case (as in most cases), the token level that we are interested in is "words".

Given "words" is the default token (identified through the <code>token</code> argument, we just need to identify the **input** (the text column name; in this instance it is simply called `text`) and the **output** (the name of the new column that will contain each token; in this instance we will call it "word")

```{r}
#| label: tokenisation
newtest_token_df <- newtest_df %>% 
  unnest_tokens(input = text,
                output = "word")


glimpse(newtest_token_df)

```

Now we have a data frame `newtest_token_df` where each row corresponds to a word (identified in the column `word`) within each verse.

Now, we can use `count()` to see what the most common words are:

```{r}
#| label: count_1
newtest_token_df %>% 
  count(word, sort = TRUE) %>% 
  head()
```

As the output above shows, the most common words don't give us any insight into what the themes of the text are. Most of the words in this list are common "stop words". They are words that need to be removed before we can continue with any further processing or analyses.

### Stop Word Removal

Before we can remove any stop words from our dataset, we first need to identify a collection of words that are considered *stop words.* Thankfully, the **{tidytext}** package contains a `stop_words` data frame that contains commonly used stop words from three different lexicon sources.

Using `anti_join()` we can select only the words in our dataset that do not match any of the stop words.

```{r}
newtest_token_df <- newtest_token_df %>% 
  anti_join(stop_words, by = "word")

newtest_token_df %>% 
  count(word, sort = TRUE) %>% 
  head(10)
```

By removing stop words, we reduced the number of rows in our tokenised dataset from 180,392 to just 52,850! While our list of the most common words is certainly more informative, there are still some words that would be considered stop words, but were missed by our initial anti join. We will quickly fix that up now.

```{r}
#| label: more-stop-words
#| warning: false

more_stop_words <- tibble(word = c("thou", "thee", "thy", "hath", "shalt", "woe", "ye"))

newtest_token_df <- newtest_token_df %>% 
  anti_join(more_stop_words)

newtest_token_df %>% 
  count(word, sort = TRUE) %>% 
  head(10)
```

### Lemmatisation

Our final pre-processing stage is to reduce the words down to their base word or "lemma". This will ensure that words with different tenses are captured as one word. For example, in our data-set there are 5 variations of the word "gather". If we do not reduce these down to their lemma "gather", our analyses will look at each word as a completely separate entity.

```{r}
#| label: gather-lemma
newtest_token_df %>% 
  filter(str_detect(word, "gather")) %>% count(word, sort = TRUE)

```

This time we will use `lemmatize_words()` from the **{textstem}** package within a `mutate()` to identify the base of each word and use this base in a new column.

```{r}
#| label: lemmatise-words
newtest_lemma_df <- newtest_token_df %>% 
  mutate(lemma = lemmatize_words(word))
  
newtest_lemma_df %>% 
  filter(str_detect(word, "gather")) %>% 
  count(lemma)

```

Now we can see that the "gather" has been extracted from the words "gathered" and "gathering". As "gathereth" isn't a word that exists in dictionaries these days, it has been ignored. Given its rare frequency, we will leave it as is for now.

Now we are confident that our dataset contains meaningful words that have been reduced down to their base. The next step is to explore different ways to vectorize this cleaned text.
